name: Build VoiceInk
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'VoiceInk.xcodeproj/**'
      - 'whisper.cpp/**'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ main ]

env:
  DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
        
    - name: Install dependencies
      run: |
        brew install cmake ccache
        
    - name: Show tool versions
      run: |
        xcodebuild -version
        swift --version
        cmake --version
        echo "System architecture: $(uname -m)"
        sysctl -n machdep.cpu.brand_string
      
    - name: Show whisper.cpp version
      run: |
        cd whisper.cpp
        git log --oneline -1
        
    - name: Build whisper.cpp XCFramework for macOS
      run: |
        cd whisper.cpp
        
        # Use the proper XCFramework build script
        echo "Building whisper.cpp XCFramework for macOS..."
        chmod +x build-xcframework.sh
        
        # Set environment variables for the build
        export MACOS_MIN_OS_VERSION=14.0
        export ARCHS_MACOS="arm64"
        
        # Build only for macOS since that's what we need for GitHub Actions
        echo "Starting XCFramework build..."
        if ./build-xcframework.sh -p macos; then
          echo "‚úÖ XCFramework build completed successfully"
        else
          echo "‚ùå XCFramework build failed, trying fallback cmake approach..."
          
          # Fallback to cmake approach if XCFramework build fails
          cmake -B build-macos -G Xcode \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 \
            -DCMAKE_OSX_ARCHITECTURES="arm64" \
            -DBUILD_SHARED_LIBS=ON \
            -DWHISPER_BUILD_EXAMPLES=OFF \
            -DWHISPER_BUILD_TESTS=OFF \
            -DWHISPER_BUILD_SERVER=OFF \
            -DGGML_METAL=ON \
            -DGGML_METAL_EMBED_LIBRARY=ON \
            -DWHISPER_COREML=ON \
            -S .
          cmake --build build-macos --config Release
          
          # Create minimal XCFramework structure
          mkdir -p build-apple/whisper.xcframework/macos-arm64/whisper.framework/Versions/A
          mkdir -p build-apple/whisper.xcframework/macos-arm64/whisper.framework/Modules
          
          # Copy the library
          cp build-macos/src/Release/libwhisper.dylib build-apple/whisper.xcframework/macos-arm64/whisper.framework/Versions/A/whisper
          
          # Copy headers
          cp -r include build-apple/whisper.xcframework/macos-arm64/whisper.framework/Versions/A/Headers
          
          # Create a basic module map
          cat > build-apple/whisper.xcframework/macos-arm64/whisper.framework/Modules/module.modulemap << 'EOF'
          framework module whisper {
              header "whisper.h"
              header "ggml.h"
              header "ggml-alloc.h"
              header "ggml-backend.h"
              export *
          }
          EOF
          
          # Create symlinks for macOS framework structure
          cd build-apple/whisper.xcframework/macos-arm64/whisper.framework
          ln -sf Versions/A/whisper whisper
          ln -sf Versions/A/Headers Headers
          ln -sf Versions/A/Modules Modules
          cd ../../../..
        fi
        
        ls -la build-apple/
        
        # Verify the XCFramework structure
        echo "XCFramework contents:"
        find build-apple/whisper.xcframework -type f | head -20
        
        # Check if module.modulemap exists
        if [ -f "build-apple/whisper.xcframework/macos-arm64/Modules/module.modulemap" ]; then
          echo "‚úÖ Module map found"
          cat build-apple/whisper.xcframework/macos-arm64/Modules/module.modulemap
        else
          echo "‚ùå Module map not found"
          find build-apple/whisper.xcframework -name "*.modulemap" -o -name "Modules" -type d
        fi
        
    - name: Verify whisper.cpp build
      run: |
        # Verify XCFramework was created
        if [ ! -d "whisper.cpp/build-apple/whisper.xcframework" ]; then
          echo "‚ùå Error: whisper.xcframework was not created successfully"
          exit 1
        fi
        echo "‚úÖ whisper.xcframework found"
        
        # Check XCFramework structure
        echo "üîç Checking XCFramework structure..."
        ls -la whisper.cpp/build-apple/whisper.xcframework/
        if [ -d "whisper.cpp/build-apple/whisper.xcframework/macos-arm64" ]; then
          echo "‚úÖ Found macos-arm64 directory"
          ls -la whisper.cpp/build-apple/whisper.xcframework/macos-arm64/
          
          # Look for the whisper framework binary
          if [ -f "whisper.cpp/build-apple/whisper.xcframework/macos-arm64/whisper.framework/Versions/A/whisper" ]; then
            echo "‚úÖ Found whisper framework binary"
            WHISPER_LIB="whisper.cpp/build-apple/whisper.xcframework/macos-arm64/whisper.framework/Versions/A/whisper"
          elif [ -f "whisper.cpp/build-apple/whisper.xcframework/macos-arm64/whisper.framework/whisper" ]; then
            echo "‚úÖ Found whisper framework binary (flat structure)"
            WHISPER_LIB="whisper.cpp/build-apple/whisper.xcframework/macos-arm64/whisper.framework/whisper"
          else
            echo "‚ùå whisper framework binary not found"
            echo "All files in macos-arm64:"
            find whisper.cpp/build-apple/whisper.xcframework/macos-arm64 -type f
            exit 1
          fi
          
          # Verify library architecture
          echo "üîç Verifying library architecture..."
          file "$WHISPER_LIB"
          lipo -archs "$WHISPER_LIB"
          
          if lipo -archs "$WHISPER_LIB" | grep -q "arm64"; then
            echo "‚úÖ Library contains Apple Silicon (arm64) architecture"
          else
            echo "‚ùå Library missing Apple Silicon (arm64) architecture"
            exit 1
          fi
          
          # Check for module.modulemap
          if [ -f "whisper.cpp/build-apple/whisper.xcframework/macos-arm64/whisper.framework/Modules/module.modulemap" ] || \
             [ -f "whisper.cpp/build-apple/whisper.xcframework/macos-arm64/Modules/module.modulemap" ]; then
            echo "‚úÖ Module map found"
          else
            echo "‚ùå Module map not found - Swift import may fail"
            find whisper.cpp/build-apple/whisper.xcframework -name "*.modulemap" || echo "No modulemap files found"
          fi
        else
          echo "‚ùå macos-arm64 directory not found"
          echo "Available directories:"
          find whisper.cpp/build-apple/whisper.xcframework -type d
          exit 1
        fi
        
    - name: List Xcode schemes
      run: xcodebuild -project VoiceInk.xcodeproj -list
        
    - name: Clean build artifacts
      run: |
        rm -rf build/
        xcodebuild -project VoiceInk.xcodeproj \
          -scheme VoiceInk \
          -configuration Debug \
          clean
          
    - name: Build VoiceInk
      run: |
        echo "Starting VoiceInk build..."
        
        # Add the XCFramework path to framework search paths
        xcodebuild -project VoiceInk.xcodeproj \
          -scheme VoiceInk \
          -configuration Debug \
          -derivedDataPath build \
          -destination 'platform=macOS,arch=arm64' \
          -allowProvisioningUpdates \
          ARCHS='arm64' \
          VALID_ARCHS='arm64' \
          ONLY_ACTIVE_ARCH=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          OTHER_SWIFT_FLAGS="-v" \
          FRAMEWORK_SEARCH_PATHS="$(pwd)/whisper.cpp/build-apple/whisper.xcframework/macos-arm64 \$(inherited)" \
          build 2>&1 | tee build_output.log
          
    - name: Show detailed build errors on failure
      if: failure()
      run: |
        echo "=== Build Output Tail ==="
        tail -n 50 build_output.log || echo "No build output file found"
        
        echo "=== Checking Swift Module Search Paths ==="
        xcodebuild -project VoiceInk.xcodeproj -scheme VoiceInk -showBuildSettings | grep -E "(SWIFT_INCLUDE_PATHS|LIBRARY_SEARCH_PATHS|FRAMEWORK_SEARCH_PATHS|HEADER_SEARCH_PATHS)" || true
        
        echo "=== Checking XCFramework Structure ==="
        find whisper.cpp/build-apple/whisper.xcframework -type f | head -10 || echo "XCFramework not found"
        
        echo "=== Checking if whisper module can be imported ==="
        echo "import whisper" | xcrun swift -F whisper.cpp/build-apple/whisper.xcframework/macos-arm64 - 2>&1 || echo "Cannot import whisper module"
        
        echo "=== Checking Swift compiler search paths ==="
        echo "Available frameworks:"
        find whisper.cpp/build-apple/whisper.xcframework -name "*.framework" -type d
        
        echo "=== Checking for Swift interface files ==="
        find whisper.cpp/build-apple/whisper.xcframework -name "*.swiftinterface" || echo "No Swift interface files found"
          
    - name: Verify build artifacts
      run: |
        ls -la build/Build/Products/Debug/
        if [ -d "build/Build/Products/Debug/VoiceInk.app" ]; then
          echo "‚úÖ VoiceInk.app built successfully"
          du -sh build/Build/Products/Debug/VoiceInk.app
          
          # Verify the binary is built for Apple Silicon
          echo "üîç Verifying architecture..."
          file build/Build/Products/Debug/VoiceInk.app/Contents/MacOS/VoiceInk
          lipo -archs build/Build/Products/Debug/VoiceInk.app/Contents/MacOS/VoiceInk
          
          # Check if the binary contains arm64 architecture
          if lipo -archs build/Build/Products/Debug/VoiceInk.app/Contents/MacOS/VoiceInk | grep -q "arm64"; then
            echo "‚úÖ Binary contains Apple Silicon (arm64) architecture"
          else
            echo "‚ùå Binary does not contain Apple Silicon (arm64) architecture"
            exit 1
          fi
        else
          echo "‚ùå VoiceInk.app not found"
          exit 1
        fi
          
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: VoiceInk-build-${{ github.sha }}
        path: |
          build/Build/Products/Debug/VoiceInk.app
          whisper.cpp/build-apple/whisper.xcframework
        retention-days: 30
        
    - name: Test with build script
      run: |
        echo "Testing build script..."
        chmod +x build.sh
        # Don't actually run it since we already built, just check syntax
        bash -n build.sh
        echo "‚úÖ Build script syntax is valid" 