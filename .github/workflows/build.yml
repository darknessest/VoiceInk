name: Build VoiceInk
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'VoiceInk.xcodeproj/**'
      - 'whisper.cpp/**'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ main ]

env:
  DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
        
    - name: Install dependencies
      run: |
        brew install cmake ccache
        
    - name: Show tool versions
      run: |
        xcodebuild -version
        swift --version
        cmake --version
        echo "System architecture: $(uname -m)"
        sysctl -n machdep.cpu.brand_string
      
    - name: Show whisper.cpp version
      run: |
        cd whisper.cpp
        git log --oneline -1
        
    - name: Build whisper.cpp for macOS arm64
      run: |
        cd whisper.cpp
        
        # First build the static libraries
        cmake -B build-macos -G Xcode \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 \
          -DCMAKE_OSX_ARCHITECTURES="arm64" \
          -DBUILD_SHARED_LIBS=OFF \
          -DWHISPER_BUILD_EXAMPLES=OFF \
          -DWHISPER_BUILD_TESTS=OFF \
          -DWHISPER_BUILD_SERVER=OFF \
          -DGGML_METAL=ON \
          -DGGML_METAL_EMBED_LIBRARY=ON \
          -DWHISPER_COREML=ON \
          -S .
        cmake --build build-macos --config Release
        
        # Create framework structure
        mkdir -p build-macos/framework/whisper.framework/Versions/A/Headers
        mkdir -p build-macos/framework/whisper.framework/Versions/A/Resources
        
        # Create symlinks
        ln -s A build-macos/framework/whisper.framework/Versions/Current
        ln -s Versions/Current/Headers build-macos/framework/whisper.framework/Headers
        ln -s Versions/Current/Resources build-macos/framework/whisper.framework/Resources
        ln -s Versions/Current/whisper build-macos/framework/whisper.framework/whisper
        
        # Copy headers
        cp include/whisper.h build-macos/framework/whisper.framework/Versions/A/Headers/
        cp ggml/include/ggml.h build-macos/framework/whisper.framework/Versions/A/Headers/
        cp ggml/include/ggml-alloc.h build-macos/framework/whisper.framework/Versions/A/Headers/
        cp ggml/include/ggml-backend.h build-macos/framework/whisper.framework/Versions/A/Headers/
        cp ggml/include/ggml-metal.h build-macos/framework/whisper.framework/Versions/A/Headers/
        cp ggml/include/ggml-cpu.h build-macos/framework/whisper.framework/Versions/A/Headers/
        cp ggml/include/ggml-blas.h build-macos/framework/whisper.framework/Versions/A/Headers/
        cp ggml/include/gguf.h build-macos/framework/whisper.framework/Versions/A/Headers/
        
        # Create module map
        cat > build-macos/framework/whisper.framework/Versions/A/Headers/module.modulemap << EOF
        framework module whisper {
            header "whisper.h"
            header "ggml.h"
            header "ggml-alloc.h"
            header "ggml-backend.h"
            header "ggml-metal.h"
            header "ggml-cpu.h"
            header "ggml-blas.h"
            header "gguf.h"

            link "c++"
            link framework "Accelerate"
            link framework "Metal"
            link framework "Foundation"
            link framework "CoreML"

            export *
        }
        EOF
        
        # Combine static libraries into a dynamic framework
        libtool -static -o build-macos/temp_combined.a \
          build-macos/src/Release/libwhisper.a \
          build-macos/ggml/src/Release/libggml.a \
          build-macos/ggml/src/Release/libggml-base.a \
          build-macos/ggml/src/Release/libggml-cpu.a \
          build-macos/ggml/src/ggml-metal/Release/libggml-metal.a \
          build-macos/ggml/src/ggml-blas/Release/libggml-blas.a \
          build-macos/src/Release/libwhisper.coreml.a \
          2>/dev/null || true
        
        # Create dynamic library from static
        clang++ -dynamiclib \
          -target arm64-apple-macos14.0 \
          -Wl,-all_load build-macos/temp_combined.a \
          -framework Foundation \
          -framework Metal \
          -framework Accelerate \
          -framework CoreML \
          -install_name @rpath/whisper.framework/Versions/Current/whisper \
          -o build-macos/framework/whisper.framework/Versions/A/whisper
        
        # Clean up temp file
        rm -f build-macos/temp_combined.a
        
        # Create Info.plist
        cat > build-macos/framework/whisper.framework/Versions/A/Resources/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleDevelopmentRegion</key>
            <string>en</string>
            <key>CFBundleExecutable</key>
            <string>whisper</string>
            <key>CFBundleIdentifier</key>
            <string>org.ggml.whisper</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>whisper</string>
            <key>CFBundlePackageType</key>
            <string>FMWK</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleVersion</key>
            <string>1</string>
            <key>MinimumOSVersion</key>
            <string>14.0</string>
            <key>CFBundleSupportedPlatforms</key>
            <array>
                <string>MacOSX</string>
            </array>
            <key>DTPlatformName</key>
            <string>macosx</string>
            <key>DTSDKName</key>
            <string>macosx14.0</string>
        </dict>
        </plist>
        EOF
        
        # Create the final XCFramework directory structure
        mkdir -p build-apple
        
        # Create XCFramework from the framework
        xcodebuild -create-xcframework \
          -framework build-macos/framework/whisper.framework \
          -output build-apple/whisper.xcframework
        
        # Debug: Show what was created
        echo "XCFramework contents:"
        find build-apple/whisper.xcframework -type f | head -20
        
    - name: Verify whisper.cpp build
      run: |
        # Verify framework was created
        if [ ! -f "whisper.cpp/build-macos/framework/whisper.framework/whisper" ]; then
          echo "‚ùå Error: whisper framework was not built successfully"
          exit 1
        fi
        echo "‚úÖ whisper framework found"
        
        # Verify XCFramework was created
        if [ ! -d "whisper.cpp/build-apple/whisper.xcframework" ]; then
          echo "‚ùå Error: whisper.xcframework was not created successfully"
          exit 1
        fi
        echo "‚úÖ whisper.xcframework found"
        
        # Check XCFramework structure
        echo "üîç Checking XCFramework structure..."
        ls -la whisper.cpp/build-apple/whisper.xcframework/
        if [ -d "whisper.cpp/build-apple/whisper.xcframework/macos-arm64" ]; then
          echo "‚úÖ Found macos-arm64 directory"
          ls -la whisper.cpp/build-apple/whisper.xcframework/macos-arm64/
          
          # Check if the framework exists in XCFramework
          echo "üîç Checking for framework in XCFramework..."
          if [ -d "whisper.cpp/build-apple/whisper.xcframework/macos-arm64/whisper.framework" ]; then
            echo "‚úÖ Found whisper.framework in XCFramework"
            
            # Check for module map
            if [ -f "whisper.cpp/build-apple/whisper.xcframework/macos-arm64/whisper.framework/Headers/module.modulemap" ]; then
              echo "‚úÖ Found module.modulemap"
              echo "üìã Module map contents:"
              cat whisper.cpp/build-apple/whisper.xcframework/macos-arm64/whisper.framework/Headers/module.modulemap
            else
              echo "‚ùå module.modulemap not found"
              exit 1
            fi
          else
            echo "‚ùå whisper.framework not found in XCFramework"
            echo "Contents of macos-arm64:"
            ls -la whisper.cpp/build-apple/whisper.xcframework/macos-arm64/
            exit 1
          fi
        else
          echo "‚ùå macos-arm64 directory not found"
          echo "Available directories:"
          find whisper.cpp/build-apple/whisper.xcframework -type d
          exit 1
        fi
        
        # Verify library architecture
        echo "üîç Verifying framework binary architecture..."
        FRAMEWORK_BINARY="whisper.cpp/build-macos/framework/whisper.framework/whisper"
        file "$FRAMEWORK_BINARY"
        lipo -archs "$FRAMEWORK_BINARY"
        
        if lipo -archs "$FRAMEWORK_BINARY" | grep -q "arm64"; then
          echo "‚úÖ Framework binary contains Apple Silicon (arm64) architecture"
        else
          echo "‚ùå Framework binary missing Apple Silicon (arm64) architecture"
          exit 1
        fi
        
    - name: List Xcode schemes
      run: xcodebuild -project VoiceInk.xcodeproj -list
        
    - name: Build VoiceInk
      run: |
        xcodebuild -project VoiceInk.xcodeproj \
          -scheme VoiceInk \
          -configuration Debug \
          -derivedDataPath build \
          -destination 'platform=macOS,arch=arm64' \
          -allowProvisioningUpdates \
          ARCHS='arm64' \
          VALID_ARCHS='arm64' \
          ONLY_ACTIVE_ARCH=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          build
          
    - name: Verify build artifacts
      run: |
        ls -la build/Build/Products/Debug/
        if [ -d "build/Build/Products/Debug/VoiceInk.app" ]; then
          echo "‚úÖ VoiceInk.app built successfully"
          du -sh build/Build/Products/Debug/VoiceInk.app
          
          # Verify the binary is built for Apple Silicon
          echo "üîç Verifying architecture..."
          file build/Build/Products/Debug/VoiceInk.app/Contents/MacOS/VoiceInk
          lipo -archs build/Build/Products/Debug/VoiceInk.app/Contents/MacOS/VoiceInk
          
          # Check if the binary contains arm64 architecture
          if lipo -archs build/Build/Products/Debug/VoiceInk.app/Contents/MacOS/VoiceInk | grep -q "arm64"; then
            echo "‚úÖ Binary contains Apple Silicon (arm64) architecture"
          else
            echo "‚ùå Binary does not contain Apple Silicon (arm64) architecture"
            exit 1
          fi
        else
          echo "‚ùå VoiceInk.app not found"
          exit 1
        fi
          
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: VoiceInk-build-${{ github.sha }}
        path: |
          build/Build/Products/Debug/VoiceInk.app
          whisper.cpp/build-macos/framework/whisper.framework
          whisper.cpp/build-apple/whisper.xcframework
        retention-days: 30
        
    - name: Test with build script
      run: |
        echo "Testing build script..."
        chmod +x build.sh
        # Don't actually run it since we already built, just check syntax
        bash -n build.sh
        echo "‚úÖ Build script syntax is valid" 