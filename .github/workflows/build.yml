name: Build VoiceInk
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'VoiceInk.xcodeproj/**'
      - 'whisper.cpp/**'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ main ]

env:
  DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
        
    - name: Install dependencies
      run: |
        brew install cmake ccache
        
    - name: Show tool versions
      run: |
        xcodebuild -version
        swift --version
        cmake --version
        echo "System architecture: $(uname -m)"
        sysctl -n machdep.cpu.brand_string
      
    - name: Show whisper.cpp version
      run: |
        cd whisper.cpp
        git log --oneline -1
        
    - name: Build whisper.cpp for macOS arm64
      run: |
        cd whisper.cpp
        cmake -B build-macos -G Xcode \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 \
          -DCMAKE_OSX_ARCHITECTURES="arm64" \
          -DBUILD_SHARED_LIBS=ON \
          -DWHISPER_BUILD_EXAMPLES=OFF \
          -DWHISPER_BUILD_TESTS=OFF \
          -DWHISPER_BUILD_SERVER=OFF \
          -DGGML_METAL=ON \
          -DGGML_METAL_EMBED_LIBRARY=ON \
          -DWHISPER_COREML=ON \
          -S .
        cmake --build build-macos --config Release
        ls -la build-macos/src/Release/
        
        # Create the XCFramework that the Xcode project expects
        mkdir -p build-apple
        
        # Check what library files we have
        echo "Available library files:"
        ls -la build-macos/src/Release/libwhisper*
        
        # Use the actual versioned library file instead of the symlink
        ACTUAL_LIB=$(find build-macos/src/Release -name "libwhisper*.dylib" ! -type l | head -1)
        echo "Using library file: $ACTUAL_LIB"
        
        xcodebuild -create-xcframework \
          -library "$ACTUAL_LIB" \
          -headers include \
          -output build-apple/whisper.xcframework
        
        # Debug: Show what was created
        echo "XCFramework contents:"
        find build-apple/whisper.xcframework -type f | head -20
        
    - name: Verify whisper.cpp build
      run: |
        if [ ! -f "whisper.cpp/build-macos/src/Release/libwhisper.dylib" ]; then
          echo "‚ùå Error: libwhisper.dylib was not built successfully"
          exit 1
        fi
        echo "‚úÖ libwhisper.dylib found"
        
        # Verify XCFramework was created
        if [ ! -d "whisper.cpp/build-apple/whisper.xcframework" ]; then
          echo "‚ùå Error: whisper.xcframework was not created successfully"
          exit 1
        fi
        echo "‚úÖ whisper.xcframework found"
        
        # Check XCFramework structure
        echo "üîç Checking XCFramework structure..."
        ls -la whisper.cpp/build-apple/whisper.xcframework/
        if [ -d "whisper.cpp/build-apple/whisper.xcframework/macos-arm64" ]; then
          echo "‚úÖ Found macos-arm64 directory"
          ls -la whisper.cpp/build-apple/whisper.xcframework/macos-arm64/
          
          # Check if the actual library file exists (not just symlinks)
          echo "üîç Checking for actual library files..."
          find whisper.cpp/build-apple/whisper.xcframework/macos-arm64 -name "*.dylib" -type f
          if find whisper.cpp/build-apple/whisper.xcframework/macos-arm64 -name "*.dylib" -type f | grep -q dylib; then
            echo "‚úÖ Found actual library files in XCFramework"
          else
            echo "‚ùå No actual library files found, only symlinks"
            echo "All files in macos-arm64:"
            find whisper.cpp/build-apple/whisper.xcframework/macos-arm64 -type f -o -type l
          fi
        else
          echo "‚ùå macos-arm64 directory not found"
          echo "Available directories:"
          find whisper.cpp/build-apple/whisper.xcframework -type d
        fi
        
        # Verify library architecture
        echo "üîç Verifying library architecture..."
        file whisper.cpp/build-macos/src/Release/libwhisper.dylib
        lipo -archs whisper.cpp/build-macos/src/Release/libwhisper.dylib
        
        if lipo -archs whisper.cpp/build-macos/src/Release/libwhisper.dylib | grep -q "arm64"; then
          echo "‚úÖ Library contains Apple Silicon (arm64) architecture"
        else
          echo "‚ùå Library missing Apple Silicon (arm64) architecture"
          exit 1
        fi
        
    - name: List Xcode schemes
      run: xcodebuild -project VoiceInk.xcodeproj -list
        
    - name: Build VoiceInk
      run: |
        xcodebuild -project VoiceInk.xcodeproj \
          -scheme VoiceInk \
          -configuration Debug \
          -derivedDataPath build \
          -destination 'platform=macOS,arch=arm64' \
          -allowProvisioningUpdates \
          ARCHS='arm64' \
          VALID_ARCHS='arm64' \
          ONLY_ACTIVE_ARCH=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          build
          
    - name: Verify build artifacts
      run: |
        ls -la build/Build/Products/Debug/
        if [ -d "build/Build/Products/Debug/VoiceInk.app" ]; then
          echo "‚úÖ VoiceInk.app built successfully"
          du -sh build/Build/Products/Debug/VoiceInk.app
          
          # Verify the binary is built for Apple Silicon
          echo "üîç Verifying architecture..."
          file build/Build/Products/Debug/VoiceInk.app/Contents/MacOS/VoiceInk
          lipo -archs build/Build/Products/Debug/VoiceInk.app/Contents/MacOS/VoiceInk
          
          # Check if the binary contains arm64 architecture
          if lipo -archs build/Build/Products/Debug/VoiceInk.app/Contents/MacOS/VoiceInk | grep -q "arm64"; then
            echo "‚úÖ Binary contains Apple Silicon (arm64) architecture"
          else
            echo "‚ùå Binary does not contain Apple Silicon (arm64) architecture"
            exit 1
          fi
        else
          echo "‚ùå VoiceInk.app not found"
          exit 1
        fi
          
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: VoiceInk-build-${{ github.sha }}
        path: |
          build/Build/Products/Debug/VoiceInk.app
          whisper.cpp/build-macos/src/Release/libwhisper.dylib
          whisper.cpp/build-apple/whisper.xcframework
        retention-days: 30
        
    - name: Test with build script
      run: |
        echo "Testing build script..."
        chmod +x build.sh
        # Don't actually run it since we already built, just check syntax
        bash -n build.sh
        echo "‚úÖ Build script syntax is valid" 